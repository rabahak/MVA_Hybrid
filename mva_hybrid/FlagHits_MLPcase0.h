// Class: ReadMLP
// Automatically generated by MethodBase::MakeClass
//

/* configuration options =====================================================

#GEN -*-*-*-*-*-*-*-*-*-*-*- general info -*-*-*-*-*-*-*-*-*-*-*-

Method         : MLP::MLP
TMVA Release   : 4.2.1         [262657]
ROOT Release   : 6.07/07       [395015]
Creator        : rabah
Date           : Fri Jul 22 09:52:41 2016
Host           : Darwin mba-amhis.lal.in2p3.fr 15.0.0 Darwin Kernel Version 15.0.0: Sat Sep 19 15:53:46 PDT 2015; root:xnu-3247.10.11~1/RELEASE_X86_64 x86_64
Dir            : /Users/rabah/Desktop/Hybrid_MVA/inFlagHits/Allev_CasesSeparation_recoveryOFF/case0
Training events: 476519
Analysis type  : [Classification]


#OPT -*-*-*-*-*-*-*-*-*-*-*-*- options -*-*-*-*-*-*-*-*-*-*-*-*-

# Set by User:
NCycles: "600" [Number of training cycles]
HiddenLayers: "N+5" [Specification of hidden layer architecture]
NeuronType: "tanh" [Neuron activation function type]
V: "False" [Verbose output (short form of "VerbosityLevel" below - overrides the latter one)]
VarTransform: "N" [List of variable transformations performed before training, e.g., "D_Background,P_Signal,G,N_AllClasses" for: "Decorrelation, PCA-transformation, Gaussianisation, Normalisation, each for the given class of events ('AllClasses' denotes all events of all classes, if no class indication is given, 'All' is assumed)"]
H: "True" [Print method-specific help message]
TestRate: "5" [Test for overtraining performed at each #th epochs]
UseRegulator: "False" [Use regulator to avoid over-training]
# Default:
RandomSeed: "1" [Random seed for initial synapse weights (0 means unique seed for each run; default value '1')]
EstimatorType: "CE" [MSE (Mean Square Estimator) for Gaussian Likelihood or CE(Cross-Entropy) for Bernoulli Likelihood]
NeuronInputType: "sum" [Neuron input function type]
VerbosityLevel: "Default" [Verbosity level]
CreateMVAPdfs: "False" [Create PDFs for classifier outputs (signal and background)]
IgnoreNegWeightsInTraining: "False" [Events with negative weights are ignored in the training (but are included for testing and performance evaluation)]
TrainingMethod: "BP" [Train with Back-Propagation (BP), BFGS Algorithm (BFGS), or Genetic Algorithm (GA - slower and worse)]
LearningRate: "2.000000e-02" [ANN learning rate parameter]
DecayRate: "1.000000e-02" [Decay rate for learning parameter]
EpochMonitoring: "False" [Provide epoch-wise monitoring plots according to TestRate (caution: causes big ROOT output file!)]
Sampling: "1.000000e+00" [Only 'Sampling' (randomly selected) events are trained each epoch]
SamplingEpoch: "1.000000e+00" [Sampling is used for the first 'SamplingEpoch' epochs, afterwards, all events are taken for training]
SamplingImportance: "1.000000e+00" [ The sampling weights of events in epochs which successful (worse estimator than before) are multiplied with SamplingImportance, else they are divided.]
SamplingTraining: "True" [The training sample is sampled]
SamplingTesting: "False" [The testing sample is sampled]
ResetStep: "50" [How often BFGS should reset history]
Tau: "3.000000e+00" [LineSearch "size step"]
BPMode: "sequential" [Back-propagation learning mode: sequential or batch]
BatchSize: "-1" [Batch size: number of events/batch, only set if in Batch Mode, -1 for BatchSize=number_of_events]
ConvergenceImprove: "1.000000e-30" [Minimum improvement which counts as improvement (<0 means automatic convergence check is turned off)]
ConvergenceTests: "-1" [Number of steps (without improvement) required for convergence (<0 means automatic convergence check is turned off)]
UpdateLimit: "10000" [Maximum times of regulator update]
CalculateErrors: "False" [Calculates inverse Hessian matrix at the end of the training to be able to calculate the uncertainties of an MVA value]
WeightRange: "1.000000e+00" [Take the events for the estimator calculations from small deviations from the desired value to large deviations only over the weight range]
##


#VAR -*-*-*-*-*-*-*-*-*-*-*-* variables *-*-*-*-*-*-*-*-*-*-*-*-

NVar 5
chi2                          chi2                          chi2                          chi2                                                            'D'    [0.00981431268156,27.9433021545]
nx                            nx                            nx                            nx                                                              'D'    [4,6]
ny                            ny                            ny                            ny                                                              'D'    [4,6]
X0Back                        X0Back                        X0Back                        X0Back                                                          'D'    [0,2208]
worstHitChi2                  worstHitChi2                  worstHitChi2                  worstHitChi2                                                    'D'    [0.00310961669311,5.49989748001]
NSpec 0


============================================================================ */

#include <vector>
#include <cmath>
#include <string>
#include <iostream>

#ifndef IClassifierReader0__def
#define IClassifierReader0__def

class IClassifierReader0 {

 public:

   // constructor
   IClassifierReader0() : fStatusIsClean( true ) {}
   virtual ~IClassifierReader0() {}

   // return classifier response
   virtual double GetMvaValue( const std::vector<double>& inputValues ) const = 0;

   // returns classifier status
   bool IsStatusClean() const { return fStatusIsClean; }

 protected:

   bool fStatusIsClean;
};

#endif

class ReadMLP0 : public IClassifierReader0 {

 public:

   // constructor
   ReadMLP0( std::vector<std::string>& theInputVars ) 
      : IClassifierReader0(),
        fClassName( "ReadMLP0" ),
        fNvars( 5 ),
        fIsNormalised( false )
   {      
      // the training input variables
      const char* inputVars[] = { "chi2", "nx", "ny", "X0Back", "worstHitChi2" };

      // sanity checks
      if (theInputVars.size() <= 0) {
         std::cout << "Problem in class \"" << fClassName << "\": empty input vector" << std::endl;
         fStatusIsClean = false;
      }

      if (theInputVars.size() != fNvars) {
         std::cout << "Problem in class \"" << fClassName << "\": mismatch in number of input values: "
                   << theInputVars.size() << " != " << fNvars << std::endl;
         fStatusIsClean = false;
      }

      // validate input variables
      for (size_t ivar = 0; ivar < theInputVars.size(); ivar++) {
         if (theInputVars[ivar] != inputVars[ivar]) {
            std::cout << "Problem in class \"" << fClassName << "\": mismatch in input variable names" << std::endl
                      << " for variable [" << ivar << "]: " << theInputVars[ivar].c_str() << " != " << inputVars[ivar] << std::endl;
            fStatusIsClean = false;
         }
      }

      // initialize min and max vectors (for normalisation)
      fVmin[0] = -1;
      fVmax[0] = 0.99999988079071;
      fVmin[1] = -1;
      fVmax[1] = 1;
      fVmin[2] = -1;
      fVmax[2] = 1;
      fVmin[3] = -1;
      fVmax[3] = 1;
      fVmin[4] = -1;
      fVmax[4] = 0.99999988079071;

      // initialize input variable types
      fType[0] = 'D';
      fType[1] = 'D';
      fType[2] = 'D';
      fType[3] = 'D';
      fType[4] = 'D';

      // initialize constants
      Initialize();

      // initialize transformation
      InitTransform();
   }

   // destructor
   virtual ~ReadMLP0() {
      Clear(); // method-specific
   }

   // the classifier response
   // "inputValues" is a vector of input values in the same order as the 
   // variables given to the constructor
   double GetMvaValue( const std::vector<double>& inputValues ) const;

 private:

   // method-specific destructor
   void Clear();

   // input variable transformation

   double fMin_1[3][5];
   double fMax_1[3][5];
   void InitTransform_1();
   void Transform_1( std::vector<double> & iv, int sigOrBgd ) const;
   void InitTransform();
   void Transform( std::vector<double> & iv, int sigOrBgd ) const;

   // common member variables
   const char* fClassName;

   const size_t fNvars;
   size_t GetNvar()           const { return fNvars; }
   char   GetType( int ivar ) const { return fType[ivar]; }

   // normalisation of input variables
   const bool fIsNormalised;
   bool IsNormalised() const { return fIsNormalised; }
   double fVmin[5];
   double fVmax[5];
   double NormVariable( double x, double xmin, double xmax ) const {
      // normalise to output range: [-1, 1]
      return 2*(x - xmin)/(xmax - xmin) - 1.0;
   }

   // type of input variable: 'F' or 'I'
   char   fType[5];

   // initialize internal variables
   void Initialize();
   double GetMvaValue__( const std::vector<double>& inputValues ) const;

   // private members (method specific)

   double ActivationFnc(double x) const;
   double OutputActivationFnc(double x) const;

   int fLayers;
   int fLayerSize[3];
   double fWeightMatrix0to1[11][6];   // weight matrix from layer 0 to 1
   double fWeightMatrix1to2[1][11];   // weight matrix from layer 1 to 2

   double * fWeights[3];
};

inline void ReadMLP0::Initialize()
{
   // build network structure
   fLayers = 3;
   fLayerSize[0] = 6; fWeights[0] = new double[6]; 
   fLayerSize[1] = 11; fWeights[1] = new double[11]; 
   fLayerSize[2] = 1; fWeights[2] = new double[1]; 
   // weight matrix from layer 0 to 1
   fWeightMatrix0to1[0][0] = 8.55803341764904;
   fWeightMatrix0to1[1][0] = 13.0488485407145;
   fWeightMatrix0to1[2][0] = 14.8410891831053;
   fWeightMatrix0to1[3][0] = 15.5116612307095;
   fWeightMatrix0to1[4][0] = -5.76479636765002;
   fWeightMatrix0to1[5][0] = -2.682839905089;
   fWeightMatrix0to1[6][0] = -18.727115437504;
   fWeightMatrix0to1[7][0] = 4.27619444974761;
   fWeightMatrix0to1[8][0] = 1.23042970289313;
   fWeightMatrix0to1[9][0] = -16.1052791316247;
   fWeightMatrix0to1[0][1] = -2.20099209838365;
   fWeightMatrix0to1[1][1] = -1.0954492177765;
   fWeightMatrix0to1[2][1] = -1.83361018444107;
   fWeightMatrix0to1[3][1] = -3.18769140844604;
   fWeightMatrix0to1[4][1] = 2.30688444859251;
   fWeightMatrix0to1[5][1] = 3.72269073625197;
   fWeightMatrix0to1[6][1] = 4.20429493685657;
   fWeightMatrix0to1[7][1] = -0.204526663657026;
   fWeightMatrix0to1[8][1] = -5.41234250776425;
   fWeightMatrix0to1[9][1] = 3.64161469361069;
   fWeightMatrix0to1[0][2] = -1.82439276178064;
   fWeightMatrix0to1[1][2] = -0.906015830517792;
   fWeightMatrix0to1[2][2] = -2.03657872036021;
   fWeightMatrix0to1[3][2] = -3.28607570211937;
   fWeightMatrix0to1[4][2] = 6.845598614131;
   fWeightMatrix0to1[5][2] = 3.71516609330172;
   fWeightMatrix0to1[6][2] = 3.27801520448096;
   fWeightMatrix0to1[7][2] = 0.288607256804284;
   fWeightMatrix0to1[8][2] = -2.29441107718607;
   fWeightMatrix0to1[9][2] = 2.41023652658499;
   fWeightMatrix0to1[0][3] = 3.56241061636685;
   fWeightMatrix0to1[1][3] = 25.6850848944431;
   fWeightMatrix0to1[2][3] = 1.31982169371917;
   fWeightMatrix0to1[3][3] = 5.83118043369565;
   fWeightMatrix0to1[4][3] = -4.52087186255002;
   fWeightMatrix0to1[5][3] = -14.0680068171077;
   fWeightMatrix0to1[6][3] = 3.75339026860637;
   fWeightMatrix0to1[7][3] = 23.3551076665073;
   fWeightMatrix0to1[8][3] = 3.53859706918042;
   fWeightMatrix0to1[9][3] = -2.26989784259347;
   fWeightMatrix0to1[0][4] = -0.566709676593196;
   fWeightMatrix0to1[1][4] = -2.00025909188494;
   fWeightMatrix0to1[2][4] = 4.39699334058473;
   fWeightMatrix0to1[3][4] = -2.4440680926734;
   fWeightMatrix0to1[4][4] = 1.13513385562639;
   fWeightMatrix0to1[5][4] = 1.39488546251647;
   fWeightMatrix0to1[6][4] = 5.52444954974607;
   fWeightMatrix0to1[7][4] = -2.00137418022812;
   fWeightMatrix0to1[8][4] = -0.0380248545549585;
   fWeightMatrix0to1[9][4] = -1.48383431235205;
   fWeightMatrix0to1[0][5] = 8.56520421782277;
   fWeightMatrix0to1[1][5] = 34.380303379243;
   fWeightMatrix0to1[2][5] = 19.3433548480586;
   fWeightMatrix0to1[3][5] = 18.1084895439579;
   fWeightMatrix0to1[4][5] = -11.3505637010203;
   fWeightMatrix0to1[5][5] = -19.6659431384205;
   fWeightMatrix0to1[6][5] = -15.4318955713311;
   fWeightMatrix0to1[7][5] = 22.9120820386003;
   fWeightMatrix0to1[8][5] = 7.45764818350059;
   fWeightMatrix0to1[9][5] = -16.4625943253244;
   // weight matrix from layer 1 to 2
   fWeightMatrix1to2[0][0] = -0.895937199044318;
   fWeightMatrix1to2[0][1] = -0.76505826953287;
   fWeightMatrix1to2[0][2] = -0.869253171769586;
   fWeightMatrix1to2[0][3] = -0.497826776615516;
   fWeightMatrix1to2[0][4] = 0.797926299755506;
   fWeightMatrix1to2[0][5] = 0.765968943558561;
   fWeightMatrix1to2[0][6] = 0.962658005547455;
   fWeightMatrix1to2[0][7] = -0.612414813452646;
   fWeightMatrix1to2[0][8] = -0.88180234239188;
   fWeightMatrix1to2[0][9] = 0.488395985804635;
   fWeightMatrix1to2[0][10] = 3.3777656629261;
}

inline double ReadMLP0::GetMvaValue__( const std::vector<double>& inputValues ) const
{
   if (inputValues.size() != (unsigned int)fLayerSize[0]-1) {
      std::cout << "Input vector needs to be of size " << fLayerSize[0]-1 << std::endl;
      return 0;
   }

   for (int l=0; l<fLayers; l++)
      for (int i=0; i<fLayerSize[l]; i++) fWeights[l][i]=0;

   for (int l=0; l<fLayers-1; l++)
      fWeights[l][fLayerSize[l]-1]=1;

   for (int i=0; i<fLayerSize[0]-1; i++)
      fWeights[0][i]=inputValues[i];

   // layer 0 to 1
   for (int o=0; o<fLayerSize[1]-1; o++) {
      for (int i=0; i<fLayerSize[0]; i++) {
         double inputVal = fWeightMatrix0to1[o][i] * fWeights[0][i];
         fWeights[1][o] += inputVal;
      }
      fWeights[1][o] = ActivationFnc(fWeights[1][o]);
   }
   // layer 1 to 2
   for (int o=0; o<fLayerSize[2]; o++) {
      for (int i=0; i<fLayerSize[1]; i++) {
         double inputVal = fWeightMatrix1to2[o][i] * fWeights[1][i];
         fWeights[2][o] += inputVal;
      }
      fWeights[2][o] = OutputActivationFnc(fWeights[2][o]);
   }

   return fWeights[2][0];
}

double ReadMLP0::ActivationFnc(double x) const {
   // hyperbolic tan
   return tanh(x);
}
double ReadMLP0::OutputActivationFnc(double x) const {
   // sigmoid
   return 1.0/(1.0+exp(-x));
}
   
// Clean up
inline void ReadMLP0::Clear() 
{
   // clean up the arrays
   for (int lIdx = 0; lIdx < 3; lIdx++) {
      delete[] fWeights[lIdx];
   }
}
   inline double ReadMLP0::GetMvaValue( const std::vector<double>& inputValues ) const
   {
      // classifier response value
      double retval = 0;

      // classifier response, sanity check first
      if (!IsStatusClean()) {
         std::cout << "Problem in class \"" << fClassName << "\": cannot return classifier response"
                   << " because status is dirty" << std::endl;
         retval = 0;
      }
      else {
         if (IsNormalised()) {
            // normalise variables
            std::vector<double> iV;
            iV.reserve(inputValues.size());
            int ivar = 0;
            for (std::vector<double>::const_iterator varIt = inputValues.begin();
                 varIt != inputValues.end(); varIt++, ivar++) {
               iV.push_back(NormVariable( *varIt, fVmin[ivar], fVmax[ivar] ));
            }
            Transform( iV, -1 );
            retval = GetMvaValue__( iV );
         }
         else {
            std::vector<double> iV;
            int ivar = 0;
            for (std::vector<double>::const_iterator varIt = inputValues.begin();
                 varIt != inputValues.end(); varIt++, ivar++) {
               iV.push_back(*varIt);
            }
            Transform( iV, -1 );
            retval = GetMvaValue__( iV );
         }
      }

      return retval;
   }

//_______________________________________________________________________
inline void ReadMLP0::InitTransform_1()
{
   // Normalization transformation, initialisation
   fMin_1[0][0] = 0.00981431268156;
   fMax_1[0][0] = 27.9433021545;
   fMin_1[1][0] = 0.020410168916;
   fMax_1[1][0] = 27.848033905;
   fMin_1[2][0] = 0.00981431268156;
   fMax_1[2][0] = 27.9433021545;
   fMin_1[0][1] = 4;
   fMax_1[0][1] = 6;
   fMin_1[1][1] = 4;
   fMax_1[1][1] = 6;
   fMin_1[2][1] = 4;
   fMax_1[2][1] = 6;
   fMin_1[0][2] = 4;
   fMax_1[0][2] = 6;
   fMin_1[1][2] = 4;
   fMax_1[1][2] = 6;
   fMin_1[2][2] = 4;
   fMax_1[2][2] = 6;
   fMin_1[0][3] = 0;
   fMax_1[0][3] = 1828;
   fMin_1[1][3] = 0;
   fMax_1[1][3] = 2208;
   fMin_1[2][3] = 0;
   fMax_1[2][3] = 2208;
   fMin_1[0][4] = 0.00310961669311;
   fMax_1[0][4] = 5.49989748001;
   fMin_1[1][4] = 0.00622674683109;
   fMax_1[1][4] = 5.49989748001;
   fMin_1[2][4] = 0.00310961669311;
   fMax_1[2][4] = 5.49989748001;
}

//_______________________________________________________________________
inline void ReadMLP0::Transform_1( std::vector<double>& iv, int cls) const
{
   // Normalization transformation
   if (cls < 0 || cls > 2) {
   if (2 > 1 ) cls = 2;
      else cls = 2;
   }
   const int nVar = 5;

   // get indices of used variables

   // define the indices of the variables which are transformed by this transformation
   static std::vector<int> indicesGet;
   static std::vector<int> indicesPut;

   if ( indicesGet.empty() ) { 
      indicesGet.reserve(fNvars);
      indicesGet.push_back( 0);
      indicesGet.push_back( 1);
      indicesGet.push_back( 2);
      indicesGet.push_back( 3);
      indicesGet.push_back( 4);
   } 
   if ( indicesPut.empty() ) { 
      indicesPut.reserve(fNvars);
      indicesPut.push_back( 0);
      indicesPut.push_back( 1);
      indicesPut.push_back( 2);
      indicesPut.push_back( 3);
      indicesPut.push_back( 4);
   } 

   static std::vector<double> dv;
   dv.resize(nVar);
   for (int ivar=0; ivar<nVar; ivar++) dv[ivar] = iv[indicesGet.at(ivar)];
   for (int ivar=0;ivar<5;ivar++) {
      double offset = fMin_1[cls][ivar];
      double scale  = 1.0/(fMax_1[cls][ivar]-fMin_1[cls][ivar]);
      iv[indicesPut.at(ivar)] = (dv[ivar]-offset)*scale * 2 - 1;
   }
}

//_______________________________________________________________________
inline void ReadMLP0::InitTransform()
{
   InitTransform_1();
}

//_______________________________________________________________________
inline void ReadMLP0::Transform( std::vector<double>& iv, int sigOrBgd ) const
{
   Transform_1( iv, sigOrBgd );
}
